function tradingChart(data) {
	this.ohlcv 	= data;
	this.series	= [];
	this.title	= "[chart title]";
}
tradingChart.prototype.addIndicator = function(indicator, data, options) {
	var indicatorData = indicator(data, options);
	var i;
	var l = indicatorData.length;
	for (i=0;i<l;i++) {
		this.series.push(indicatorData[i]);
	}
	//console.log("series", this.series);
};
tradingChart.prototype.loadDataset = function(url, callback) {
	var scope = this;
	// load data
	$.ajax({
		url: 		url,
		dataType:	"json",
		type:		"POST",
		data:		{
			
		},
		success: 	function(data){
			var i;
			var l = data.length;
			for (i=0;i<l;i++) {
				data[i][0] *= 1000;
				data[i][1] *= 1;
			}
			scope.series.push({
				data:	data,
				name:	"sentiment",
				type:	"spline",
				yAxis: 2
			});
			callback(data);
		}
	});
};
tradingChart.prototype.render = function() {
	var ohlc 		= [];
	var volume 		= [];
	var dataLength 	= this.ohlcv.length;

	for (i = 0; i < dataLength; i++) {
		ohlc.push([
			this.ohlcv[i][0], // the date
			this.ohlcv[i][1]*1, // open
			this.ohlcv[i][2]*1, // high
			this.ohlcv[i][3]*1, // low
			this.ohlcv[i][4]*1 // close
		]);

		volume.push([
			this.ohlcv[i][0], // the date
			this.ohlcv[i][5]*1 // the volume
		])
	}
	
	this.series.push({
			type: 'candlestick',
			name: 'AAPL',
			data: ohlc
		});
	this.series.push({
			type: 'column',
			name: 'Volume',
			data: volume,
			yAxis: 1
		});

	// create the chart
	chart = new Highcharts.StockChart({
		chart: {
			renderTo: 'chart_container',
			alignTicks: false
		},

		rangeSelector: {
			selected: 1
		},

		title: {
			text: this.title
		},

		yAxis: [
			{
				title: {
					text: 'OHLC'
				},
				height: 200,
				lineWidth: 2
			},
			{
				title: {
					text: 'Volume'
				},
				top: 300,
				height: 100,
				offset: 0,
				lineWidth: 2
			},
			{
				title: {
					text: 'sentiment'
				},
				max:	0.4,
				min:	-0.4,
				opposite:	true,
				plotLines: [{
	                color: '#FF0000',
	                width: 2,
	                value: 0
	            }]
			},
			{
				title: {
					text: 'Cumulative'
				},
				max:	300,
				min:	-300,
				top: 	450,
				height: 100,
				opposite:	true,
				plotLines: [{
	                color: '#FF0000',
	                width: 2,
	                value: 0
	            }]
			}
		],

		series: this.series
	});
};














function simpleChart(id) {
	this.series	= [];
	this.yaxis	= [];
	this.ohlcv	= [];
	this.id 	= id;
	this.title	= "[chart title]";
	this.type	= "stock";
}
simpleChart.prototype.addIndicator = function(indicator, data, options) {
	var indicatorData = indicator(data, options);
	var i;
	var l = indicatorData.length;
	for (i=0;i<l;i++) {
		this.series.push(indicatorData[i]);
	}
};
simpleChart.prototype.createAxis = function(options) {
	var conf = $.extend({
		title:		"(no title)",
		max:		false,
		min:		false,
		top:		false,
		height:		false,
		opposite:	false,
		lines:		false,
		lineWidth:	false
	}, options);
	
	var axis = {
		title: {
			text: options.title
		}
	};
	if (conf.max) {
		axis.max 	= conf.max;
	}
	if (conf.min) {
		axis.min 	= conf.min;
	}
	if (conf.top) {
		axis.top 	= conf.top;
	}
	if (conf.height) {
		axis.height 	= conf.height;
	}
	if (conf.lineWidth) {
		axis.lineWidth 	= conf.lineWidth;
	}
	if (conf.lineWidth) {
		axis.lineWidth 	= conf.lineWidth;
	}
	if (conf.offset) {
		axis.offset 	= conf.offset;
	}
	if (conf.opposite) {
		axis.opposite 	= conf.opposite;
	}
	if (conf.lines) {
		axis.plotLines 	= conf.lines;
	}
	
	this.yaxis.push(axis);
	
	return this.yaxis.length-1;
	
};
simpleChart.prototype.createTradingAxis = function() {
	this.createAxis({
		title:	"OHLC",
		height: 200,
		lineWidth: 2
	});
	this.createAxis({
		title:	"Volume",
		top: 	300,
		height: 100,
		offset: 0,
		lineWidth: 2
	});
	return true;
};
simpleChart.prototype.addOHLCVData = function(data, options) {
	
	options = $.extend({
		ohlc: {
			display:		true,
			title:			"OHLC",
			axis:			0
		},
		volume: {
			display:		true,
			title:			"Volume",
			axis:			1
		}
	},options);
	
	this.ohlcv.push({
		raw: 		data,
		data: 		[],
		volume: 	[],
		options:	options
	});
};
simpleChart.prototype.loadDataset = function(url, callback) {
	var scope = this;
	// load data
	$.ajax({
		url: 		url,
		dataType:	"json",
		type:		"POST",
		data:		{
			
		},
		success: 	function(data){
			var i;
			var l = data.length;
			for (i=0;i<l;i++) {
				data[i][0] *= 1000;
				data[i][1] *= 1;
			}
			callback(data);
		}
	});
};
simpleChart.prototype.render = function() {
	var i, j;
	
	
	// render OHLCV data
	for (i=0;i<this.ohlcv.length;i++) {
		var dataLength 	= this.ohlcv[i].raw.length;
		
		for (j = 0; j < dataLength; j++) {
			this.ohlcv[i].data.push([
				this.ohlcv[i].raw[j][0], // the date
				this.ohlcv[i].raw[j][1]*1, // open
				this.ohlcv[i].raw[j][2]*1, // high
				this.ohlcv[i].raw[j][3]*1, // low
				this.ohlcv[i].raw[j][4]*1 // close
			]);
			this.ohlcv[i].volume.push([
				this.ohlcv[i].raw[j][0], // the date
				this.ohlcv[i].raw[j][5]*1 // the volume
			]);
		}
		
		if (this.ohlcv[i].options.ohlc.display) {
			this.series.push({
				type: 'candlestick',
				name: this.ohlcv[i].options.ohlc.title,
				data: this.ohlcv[i].data,
				yAxis: this.ohlcv[i].options.ohlc.axis,
				dataGrouping: {
					enabled: 			false
				}
			});
		}
		if (this.ohlcv[i].options.volume.display) {
			this.series.push({
				type: 'column',
				name: this.ohlcv[i].options.volume.title,
				data: this.ohlcv[i].volume,
				yAxis: this.ohlcv[i].options.volume.axis
			});
		}
	}
	
	console.log("this.ohlcv",this.ohlcv);
	
	//console.log("this.series",this.series);
	
	// create the chart
	if (this.type == "stock") {
		this.chart = new Highcharts.StockChart({
			chart: {
				renderTo: this.id,
				alignTicks: false
			},
			plotOptions: {
				area: {
					stacking: 'normal',
					lineColor: '#666666',
					lineWidth: 1,
					marker: {
						lineWidth: 1,
						lineColor: '#666666'
					}
				},
				column: {
					stacking: 'normal',
					lineColor: '#666666',
					lineWidth: 1,
					marker: {
						lineWidth: 1,
						lineColor: '#666666'
					}
				}
			},
			
			rangeSelector: {
				selected: 1
			},
	
			title: {
				text: this.title
			},
	
			yAxis: this.yaxis,
	
			series: this.series
		});
	} else {
		this.chart = new Highcharts.Chart({
			chart: {
				renderTo: this.id,
				alignTicks: false
			},
			plotOptions: {
				area: {
					stacking: 'normal',
					lineColor: '#666666',
					lineWidth: 1,
					marker: {
						lineWidth: 1,
						lineColor: '#666666'
					}
				},
				column: {
					stacking: 'normal',
					lineColor: '#666666',
					lineWidth: 1,
					marker: {
						lineWidth: 1,
						lineColor: '#666666'
					}
				}
			},
			
			rangeSelector: {
				selected: 1
			},
	
			title: {
				text: this.title
			},
			yAxis: this.yaxis,
	
			series: this.series
		});
	}
};
