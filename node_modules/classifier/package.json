{
  "name": "classifier",
  "description": "Naive Bayesian classifier with Redis backend",
  "version": "0.1.0",
  "author": {
    "name": "Heather Arthur",
    "email": "fayearthur@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/harthur/classifier.git"
  },
  "main": "./lib/bayesian",
  "dependencies": {
    "underscore": ">=1.1.0",
    "redis": ">=0.7.0"
  },
  "devDependencies": {
    "mocha": ">=1.0.0",
    "cradle": ">=0.2.0",
    "should": ">=0.6.0",
    "async": ">=0.1.18"
  },
  "keywords": [
    "bayesian",
    "classifier",
    "machine learning"
  ],
  "readme": "# classifier\n\n`classifier` is a JavaScript naive [Bayesian classifier](http://en.wikipedia.org/wiki/Bayesian_spam_filtering) with backends for Redis and localStorage:\n\n```javascript\nvar bayes = new classifier.Bayesian();\n\nbayes.train(\"cheap replica watches\", 'spam');\nbayes.train(\"I don't know if this works on windows\", 'not');\n\nvar category = bayes.classify(\"free watches\");   // \"spam\"\n```\n\n# using in node\nIf you have [node](http://nodejs.org/) you can install with [npm](http://github.com/isaacs/npm):\n\n\tnpm install classifier\n\n# using in the browser\nDownload the latest [classifier.js](http://github.com/harthur/classifier/downloads). In the browser you can only use the `localStorage` and (default) memory backends.\n\n# Redis backend\nYou can store the classifier state in [Redis](http://redis.io/) for persisting and training from multiple sources:\n\n```javascript\nvar bayes = new classifier.Bayesian({\n  backend: {\n    type: 'Redis',\n    options: {\n      hostname: 'localhost', // default\n      port: 6379,            // default\n      name: 'emailspam'      // namespace for persisting\n    }\n  }\n});\n\nbayes.train(\"cheap replica watches\", \"spam\", function() {\n  console.log(\"trained\");\n});\n\nbayes.classify(\"free watches\", function(category) {\n  console.log(\"classified in: \" + category);\n});\n```\n\n# JSON\nYou can serialize and load in the classifier's state with JSON:\n\n```javascript\nvar json = bayes.toJSON();\n\nbayes.fromJSON(json);\n```\n\n# Other options\n`Bayesian()` takes an options hash that you can define these properties in:\n\n### backend\nThe backend property takes a `type` which is one of `'Redis'`, `'localStorage'`, or `'memory'`(default). The backend also has an `options` hash. The Redis backend takes `hostname`, `port`, `password`, `name`, `db`, and `error` (an error callback) in its options. The localStorage backend takes `name` for namespacing.\n\n### thresholds\nSpecify the classification thresholds for each category. To classify an item in a category with a threshold of `x` the probably that item is in the category has to be more than `x` times the probability that it's in any other category. Default value is `1`. A common threshold setting for spam is:\n\n```\nthresholds: {\n  spam: 3,\n  not: 1\n}\n```\n\n### default\nThe default category to throw an item in if it can't be classified in any of the categories. The default value of `default` is `\"unclassified\"`.\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/harthur/classifier/issues"
  },
  "homepage": "https://github.com/harthur/classifier",
  "_id": "classifier@0.1.0",
  "dist": {
    "shasum": "f4f64928f44a2460fa2530a951fba0db7f2463d7"
  },
  "_from": "classifier@latest",
  "_resolved": "https://registry.npmjs.org/classifier/-/classifier-0.1.0.tgz"
}
