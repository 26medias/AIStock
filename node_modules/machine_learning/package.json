{
  "name": "machine_learning",
  "version": "0.0.4",
  "description": "Machine learning library for Node.js",
  "main": "./lib/machine_learning",
  "repository": {
    "type": "git",
    "url": "git://github.com/junku901/machine_learning"
  },
  "keywords": [
    "machine learning",
    "ml",
    "neural network",
    "svm",
    "support vector machine",
    "kmeans",
    "knn",
    "k nearest neighbors",
    "decision tree",
    "genetic algorithm",
    "nmf",
    "non-negative matrix factorization"
  ],
  "author": {
    "name": "Joon-Ku Kang",
    "email": "junku901@gmail.com"
  },
  "license": "MIT",
  "dependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "# machine_learning\r\n\r\nMachine learning library for node.js.\r\n\r\n## Installation\r\n```\r\n$ npm install machine_learning\r\n```\r\n\r\n## Features\r\n\r\n  * Logistic Regression\r\n  * MLP (Multi-Layer Perceptron)\r\n  * SVM (Support Vector Machine)\r\n  * KNN (K-nearest neighbors)\r\n  * K-means clustering\r\n  * 3 Optimization Algorithms (Hill-Climbing, Simulated Annealing, Genetic Algorithm)\r\n  * Decision Tree\r\n  * NMF (non-negative matrix factorization)\r\n\r\n## Implementation Details\r\n\r\nSVM is using Sequential Minimal Optimization (SMO) for its training algorithm.\r\n\r\nFor Decision Tree, Classification And Regression Tree (CART) was used for its building algorithm.\r\n\r\n# Usage\r\n\r\n## Logistic Regression\r\n```\r\nvar ml = require('machine_learning');\r\nvar x = [[1,1,1,0,0,0],\r\n         [1,0,1,0,0,0],\r\n         [1,1,1,0,0,0],\r\n         [0,0,1,1,1,0],\r\n         [0,0,1,1,0,0],\r\n         [0,0,1,1,1,0]];\r\nvar y = [[1, 0],\r\n         [1, 0],\r\n         [1, 0],\r\n         [0, 1],\r\n         [0, 1],\r\n         [0, 1]];\r\n\r\nvar classifier = new ml.LogisticRegression({\r\n    'input' : x,\r\n    'label' : y,\r\n    'n_in' : 6,\r\n    'n_out' : 2\r\n});\r\n\r\nclassifier.set('log level',1);\r\n\r\nvar training_epochs = 800, lr = 0.01;\r\n\r\nclassifier.train({\r\n    'lr' : lr,\r\n    'epochs' : training_epochs\r\n});\r\n\r\nx = [[1, 1, 0, 0, 0, 0],\r\n     [0, 0, 0, 1, 1, 0],\r\n     [1, 1, 1, 1, 1, 0]];\r\n\r\nconsole.log(\"Result : \",classifier.predict(x));\r\n```\r\n\r\n## MLP (Multi-Layer Perceptron)\r\n```\r\nvar ml = require('machine_learning');\r\nvar x = [[0.4, 0.5, 0.5, 0.,  0.,  0.],\r\n         [0.5, 0.3,  0.5, 0.,  0.,  0.],\r\n         [0.4, 0.5, 0.5, 0.,  0.,  0.],\r\n         [0.,  0.,  0.5, 0.3, 0.5, 0.],\r\n         [0.,  0.,  0.5, 0.4, 0.5, 0.],\r\n         [0.,  0.,  0.5, 0.5, 0.5, 0.]];\r\nvar y = [[1, 0],\r\n         [1, 0],\r\n         [1, 0],\r\n         [0, 1],\r\n         [0, 1],\r\n         [0, 1]];\r\n\r\nvar mlp = new ml.MLP({\r\n    'input' : x,\r\n    'label' : y,\r\n    'n_ins' : 6,\r\n    'n_outs' : 2,\r\n    'hidden_layer_sizes' : [4,4,5]\r\n});\r\n\r\nmlp.set('log level',1); // 0 : nothing, 1 : info, 2 : warning.\r\n\r\nmlp.train({\r\n    'lr' : 0.6,\r\n    'epochs' : 20000\r\n});\r\n\r\na = [[0.5, 0.5, 0., 0., 0., 0.],\r\n     [0., 0., 0., 0.5, 0.5, 0.],\r\n     [0.5, 0.5, 0.5, 0.5, 0.5, 0.]];\r\n\r\nconsole.log(mlp.predict(a));\r\n```\r\n\r\n## SVM (Support Vector Machine)\r\n```\r\nvar ml = require('machine_learning');\r\nvar x = [[0.4, 0.5, 0.5, 0.,  0.,  0.],\r\n         [0.5, 0.3,  0.5, 0.,  0.,  0.01],\r\n         [0.4, 0.8, 0.5, 0.,  0.1,  0.2],\r\n         [1.4, 0.5, 0.5, 0.,  0.,  0.],\r\n         [1.5, 0.3,  0.5, 0.,  0.,  0.],\r\n         [0., 0.9, 1.5, 0.,  0.,  0.],\r\n         [0., 0.7, 1.5, 0.,  0.,  0.],\r\n         [0.5, 0.1,  0.9, 0.,  -1.8,  0.],\r\n         [0.8, 0.8, 0.5, 0.,  0.,  0.],\r\n         [0.,  0.9,  0.5, 0.3, 0.5, 0.2],\r\n         [0.,  0.,  0.5, 0.4, 0.5, 0.],\r\n         [0.,  0.,  0.5, 0.5, 0.5, 0.],\r\n         [0.3, 0.6, 0.7, 1.7,  1.3, -0.7],\r\n         [0.,  0.,  0.5, 0.3, 0.5, 0.2],\r\n         [0.,  0.,  0.5, 0.4, 0.5, 0.1],\r\n         [0.,  0.,  0.5, 0.5, 0.5, 0.01],\r\n         [0.2, 0.01, 0.5, 0.,  0.,  0.9],\r\n         [0.,  0.,  0.5, 0.3, 0.5, -2.3],\r\n         [0.,  0.,  0.5, 0.4, 0.5, 4],\r\n         [0.,  0.,  0.5, 0.5, 0.5, -2]];\r\n\r\nvar y =  [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1];\r\n\r\nvar svm = new ml.SVM({\r\n    x : x,\r\n    y : y\r\n});\r\n\r\nsvm.train({\r\n    C : 1.1, // default : 1.0. C in SVM.\r\n    tol : 1e-5, // default : 1e-4. Higher tolerance --> Higher precision\r\n    max_passes : 20, // default : 20. Higher max_passes --> Higher precision\r\n    alpha_tol : 1e-5, // default : 1e-5. Higher alpha_tolerance --> Higher precision\r\n\r\n    kernel : { type: \"polynomial\", c: 1, d: 5}\r\n    // default : {type : \"gaussian\", sigma : 1.0}\r\n    // {type : \"gaussian\", sigma : 0.5}\r\n    // {type : \"linear\"} // x*y\r\n    // {type : \"polynomial\", c : 1, d : 8} // (x*y + c)^d\r\n    // Or you can use your own kernel.\r\n    // kernel : function(vecx,vecy) { return dot(vecx,vecy);}\r\n});\r\n\r\nconsole.log(\"Predict : \",svm.predict([1.3,  1.7,  0.5, 0.5, 1.5, 0.4]));\r\n```\r\n\r\n## KNN (K-nearest neighbors)\r\n```\r\nvar ml = require('machine_learning');\r\n\r\nvar data = [[1,0,1,0,1,1,1,0,0,0,0,0,1,0],\r\n            [1,1,1,1,1,1,1,0,0,0,0,0,1,0],\r\n            [1,1,1,0,1,1,1,0,1,0,0,0,1,0],\r\n            [1,0,1,1,1,1,1,1,0,0,0,0,1,0],\r\n            [1,1,1,1,1,1,1,0,0,0,0,0,1,1],\r\n            [0,0,1,0,0,1,0,0,1,0,1,1,1,0],\r\n            [0,0,0,0,0,0,1,1,1,0,1,1,1,0],\r\n            [0,0,0,0,0,1,1,1,0,1,0,1,1,0],\r\n            [0,0,1,0,1,0,1,1,1,1,0,1,1,1],\r\n            [0,0,0,0,0,0,1,1,1,1,1,1,1,1],\r\n            [1,0,1,0,0,1,1,1,1,1,0,0,1,0]\r\n           ];\r\n\r\nvar result = [23,12,23,23,45,70,123,73,146,158,64];\r\n\r\nvar knn = new ml.KNN({\r\n    data : data,\r\n    result : result\r\n});\r\n\r\nvar y = knn.predict({\r\n    x : [0,0,0,0,0,0,0,1,1,1,1,1,1,1],\r\n    k : 3,\r\n\r\n    weightf : {type : 'gaussian', sigma : 10.0},\r\n    // default : {type : 'gaussian', sigma : 10.0}\r\n    // {type : 'none'}. weight == 1\r\n    // Or you can use your own weight f\r\n    // weightf : function(distance) {return 1./distance}\r\n\r\n    distance : {type : 'euclidean'}\r\n    // default : {type : 'euclidean'}\r\n    // {type : 'pearson'}\r\n    // Or you can use your own distance function\r\n    // distance : function(vecx, vecy) {return Math.abs(dot(vecx,vecy));}\r\n});\r\n\r\nconsole.log(y);\r\n```\r\n\r\n## K-means clustering\r\n```\r\nvar ml = require('machine_learning');\r\n\r\nvar data = [[1,0,1,0,1,1,1,0,0,0,0,0,1,0],\r\n            [1,1,1,1,1,1,1,0,0,0,0,0,1,0],\r\n            [1,1,1,0,1,1,1,0,1,0,0,0,1,0],\r\n            [1,0,1,1,1,1,1,1,0,0,0,0,1,0],\r\n            [1,1,1,1,1,1,1,0,0,0,0,0,1,1],\r\n            [0,0,1,0,0,1,0,0,1,0,1,1,1,0],\r\n            [0,0,0,0,0,0,1,1,1,0,1,1,1,0],\r\n            [0,0,0,0,0,1,1,1,0,1,0,1,1,0],\r\n            [0,0,1,0,1,0,1,1,1,1,0,1,1,1],\r\n            [0,0,0,0,0,0,1,1,1,1,1,1,1,1],\r\n            [1,0,1,0,0,1,1,1,1,1,0,0,1,0]\r\n           ];\r\n\r\nvar result = ml.kmeans.cluster({\r\n    data : data,\r\n    k : 4,\r\n    epochs: 100,\r\n\r\n    distance : {type : \"pearson\"}\r\n    // default : {type : 'euclidean'}\r\n    // {type : 'pearson'}\r\n    // Or you can use your own distance function\r\n    // distance : function(vecx, vecy) {return Math.abs(dot(vecx,vecy));}\r\n});\r\n\r\nconsole.log(\"clusters : \", result.clusters);\r\nconsole.log(\"means : \", result.means);\r\n```\r\n\r\n## Hill-Climbing\r\n```\r\nvar ml = require('machine_learning');\r\n\r\nvar costf = function(vec) {\r\n    var cost = 0;\r\n    for(var i =0; i<14;i++) { // 15-dimensional vector\r\n        cost += (0.5*i*vec[i]*Math.exp(-vec[i]+vec[i+1])/vec[i+1])\r\n    }\r\n    cost += (3.*vec[14]/vec[0]);\r\n    return cost;\r\n};\r\n\r\nvar domain = [];\r\nfor(var i=0;i<15;i++)\r\n    domain.push([1,70]); // domain[idx][0] : minimum of vec[idx], domain[idx][1] : maximum of vec[idx].\r\n\r\nvar vec = ml.optimize.hillclimb({\r\n    domain : domain,\r\n    costf : costf\r\n});\r\n\r\nconsole.log(\"vec : \",vec);\r\nconsole.log(\"cost : \",costf(vec));\r\n```\r\n\r\n## Simulated Annealing\r\n```\r\nvar ml = require('machine_learning');\r\n\r\nvar costf = function(vec) {\r\n    var cost = 0;\r\n    for(var i =0; i<14;i++) { // 15-dimensional vector\r\n        cost += (0.5*i*vec[i]*Math.exp(-vec[i]+vec[i+1])/vec[i+1])\r\n    }\r\n    cost += (3.*vec[14]/vec[0]);\r\n    return cost;\r\n};\r\n\r\nvar domain = [];\r\nfor(var i=0;i<15;i++)\r\n    domain.push([1,70]); // domain[idx][0] : minimum of vec[idx], domain[idx][1] : maximum of vec[idx].\r\n\r\nvar vec = ml.optimize.anneal({\r\n    domain : domain,\r\n    costf : costf,\r\n    temperature : 100000.0,\r\n    cool : 0.999,\r\n    step : 4\r\n});\r\n\r\nconsole.log(\"vec : \",vec);\r\nconsole.log(\"cost : \",costf(vec));\r\n```\r\n\r\n## Genetic Algorithm\r\n```\r\nvar ml = require('machine_learning');\r\n\r\nvar costf = function(vec) {\r\n    var cost = 0;\r\n    for(var i =0; i<14;i++) { // 15-dimensional vector\r\n        cost += (0.5*i*vec[i]*Math.exp(-vec[i]+vec[i+1])/vec[i+1])\r\n    }\r\n    cost += (3.*vec[14]/vec[0]);\r\n    return cost;\r\n};\r\n\r\nvar domain = [];\r\nfor(var i=0;i<15;i++)\r\n    domain.push([1,70]); // domain[idx][0] : minimum of vec[idx], domain[idx][1] : maximum of vec[idx].\r\n\r\nvar vec = ml.optimize.genetic({\r\n    domain : domain,\r\n    costf : costf,\r\n    population : 50,\r\n    elite : 2, // elitism. number of elite chromosomes.\r\n    epochs : 300,\r\n    q : 0.3 // Rank-Based Fitness Assignment. fitness = q * (1-q)^(rank-1)\r\n            // higher q --> higher selection pressure\r\n});\r\n\r\nconsole.log(\"vec : \",vec);\r\nconsole.log(\"cost : \",costf(vec));\r\n```\r\n\r\n## Decision Tree\r\n```\r\n// Reference : 'Programming Collective Intellignece' by Toby Segaran.\r\n\r\nvar ml = require('machine_learning');\r\n\r\nvar data =[['slashdot','USA','yes',18],\r\n           ['google','France','yes',23],\r\n           ['digg','USA','yes',24],\r\n           ['kiwitobes','France','yes',23],\r\n           ['google','UK','no',21],\r\n           ['(direct)','New Zealand','no',12],\r\n           ['(direct)','UK','no',21],\r\n           ['google','USA','no',24],\r\n           ['slashdot','France','yes',19],\r\n           ['digg','USA','no',18,],\r\n           ['google','UK','no',18,],\r\n           ['kiwitobes','UK','no',19],\r\n           ['digg','New Zealand','yes',12],\r\n           ['slashdot','UK','no',21],\r\n           ['google','UK','yes',18],\r\n           ['kiwitobes','France','yes',19]];\r\nvar result = ['None','Premium','Basic','Basic','Premium','None','Basic','Premium','None','None','None','None','Basic','None','Basic','Basic'];\r\n\r\nvar dt = new ml.DecisionTree({\r\n    data : data,\r\n    result : result\r\n});\r\n\r\ndt.build();\r\n\r\n// dt.print();\r\n\r\nconsole.log(\"Classify : \", dt.classify(['(direct)','USA','yes',5]));\r\n\r\ndt.prune(1.0); // 1.0 : mingain.\r\ndt.print();\r\n```\r\n\r\n## NMF (Non-negative matrix factorization)\r\n```\r\nvar ml = require('machine_learning');\r\nvar matrix = [[22,28],\r\n              [49,64]];\r\n\r\nvar result = ml.nmf.factorize({\r\n    matrix : matrix,\r\n    features : 3,\r\n    epochs : 100\r\n});\r\n\r\nconsole.log(\"First Matrix : \",result[0]);\r\nconsole.log(\"Second Matrix : \",result[1]);\r\n```\r\n\r\n##License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2014 Joon-Ku Kang &lt;junku901@gmail.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/junku901/machine_learning/issues"
  },
  "homepage": "https://github.com/junku901/machine_learning",
  "_id": "machine_learning@0.0.4",
  "dist": {
    "shasum": "37774cc1c522bcbb03229e610e47afd6818568db"
  },
  "_from": "machine_learning@latest",
  "_resolved": "https://registry.npmjs.org/machine_learning/-/machine_learning-0.0.4.tgz"
}
