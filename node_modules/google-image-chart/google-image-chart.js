var _			= require("underscore");



// Util: encoding
var simpleEncoding = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

// This function scales the submitted values so that
// maxVal becomes the highest value.
function simpleEncode(valueArray,maxValue) {
	var chartData = ['s:'];
	for (var i = 0; i < valueArray.length; i++) {
		var currentValue = valueArray[i];
		if (!isNaN(currentValue) && currentValue >= 0) {
			chartData.push(simpleEncoding.charAt(Math.round((simpleEncoding.length-1) *
			currentValue / maxValue)));
		}
		else {
			chartData.push('_');
		}
	}
	return chartData.join('');
}

// Same as simple encoding, but for extended encoding.
var EXTENDED_MAP= 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-.';
var EXTENDED_MAP_LENGTH = EXTENDED_MAP.length;

function extendedEncode(arrVals, maxVal) {
	var chartData = 'e:';

	for(i = 0, len = arrVals.length; i < len; i++) {
		// In case the array vals were translated to strings.
		var numericVal = new Number(arrVals[i]);
		// Scale the value to maxVal.
		var scaledVal = Math.floor(EXTENDED_MAP_LENGTH *
		EXTENDED_MAP_LENGTH * numericVal / maxVal);

		if(scaledVal > (EXTENDED_MAP_LENGTH * EXTENDED_MAP_LENGTH) - 1) {
			chartData += "..";
		} else if (scaledVal < 0) {
			chartData += '__';
		} else {
			// Calculate first and second digits and add them to the output.
			var quotient = Math.floor(scaledVal / EXTENDED_MAP_LENGTH);
			var remainder = scaledVal - EXTENDED_MAP_LENGTH * quotient;
			chartData += EXTENDED_MAP.charAt(quotient) + EXTENDED_MAP.charAt(remainder);
		}
	}

	return chartData;
}















var google_image_chart = {
	url:		"https://chart.googleapis.com/chart",
	build:		function(params) {
		var i;
		var paramsArray = [];
		for (i in params) {
			paramsArray.push(i+"="+params[i]);
		}
		return google_image_chart.url+"?"+paramsArray.join("&");
	}
};


/* Candlestick */
google_image_chart.candlestick = function(options) {
	this.options = _.extend({
		width:		800,
		height:		200,
		volume:		true,
		spacing:	2,
		autoscale:	true
	},options);
}
google_image_chart.candlestick.prototype.fromYahoo = function(data) {
	var scope 	= this;
	
	this.data 	= data;
	this.n		= data.length;
	
	var prices = {
		l:	[],
		o:	[],
		c:	[],
		h:	[]
	};
	this.chd 	= [];
	
	/*
		L
		O
		C
		H
	*/
		
	_.each(data, function(point) {
		prices.l.push(point.low);
		prices.o.push(point.open);
		prices.c.push(point.close);
		prices.h.push(point.high);
	});
	this.min 	= _.min(prices.l);
	this.max 	= _.max(prices.h);
	
	
	// Prepend and append -1 values, to have the chart with full candles, not crossing the Y axis
	
	prices.l.splice(0,0,-1);
	prices.o.splice(0,0,-1);
	prices.c.splice(0,0,-1);
	prices.h.splice(0,0,-1);
	
	prices.l.push(-1);
	prices.o.push(-1);
	prices.c.push(-1);
	prices.h.push(-1);
	
	
	this.chd.push(prices.l.join(","));
	this.chd.push(prices.o.join(","));
	this.chd.push(prices.c.join(","));
	this.chd.push(prices.h.join(","));
	
}
google_image_chart.candlestick.prototype.render = function() {
	var params = {};
	
	params['cht'] = "lc";
	params['chd'] = "t0:"+this.chd.join('|');
	
	params['chs'] 	= this.options.width+"x"+this.options.height;
	
	
	params['chm'] = "F,,0,-1,"+(Math.floor(this.options.width/this.n)*0.8);
	
	if (this.options.autoscale) {
		params['chds'] 	= this.min+","+this.max;
		//params['chxt'] 	= "y";
		//params['chxr'] 	= "0,"+this.min+","+this.max+",10";
	}
	
	return google_image_chart.build(params);
}




/* Bar (volume) */
google_image_chart.bar = function(options) {
	this.options = _.extend({
		width:		800,
		height:		200,
		volume:		true,
		spacing:	2,
		autoscale:	true
	},options);
}
google_image_chart.bar.prototype.fromYahoo = function(data, key) {
	var scope 	= this;
	
	this.data 	= data;
	this.n		= data.length;
	var points	= [];
		
	_.each(data, function(point) {
		points.push(point[key]);
	});
	
	this.min 	= _.min(points);
	this.max 	= _.max(points);
	
	/*
	// Prepend and append -1 values, to have the chart with full candles, not crossing the Y axis
	points.splice(0,0,-1);
	points.push(-1);
	*/
	
	this.chd = simpleEncode(points, this.max);
	
}
google_image_chart.bar.prototype.render = function() {
	var params = {};
	
	params['cht'] 	= "bvs";
	params['chco'] 	= "76A4FB";
	params['chd'] 	= this.chd;
	
	params['chs'] 	= this.options.width+"x"+this.options.height;
	
	params['chbh'] = "a";
	
	
	/*
	if (this.options.autoscale) {
		params['chds'] 	= this.min+","+this.max;
		params['chxt'] 	= "y";
		params['chxr'] 	= "0,"+this.min+","+this.max+",10";
	}
	*/
	return google_image_chart.build(params);
}




/* Line (Indicators) */
google_image_chart.line = function(options) {
	this.options = _.extend({
		width:		800,
		height:		200,
		bands:		[]
	},options);
}
google_image_chart.line.prototype.fromTradeStudio = function(data) {
	var scope 		= this;
	
	this.data 		= data;
	this.n			= data.length;
	this.datasets	= {};
	this.chd 		= [];
	this.chco		= [];
	
	_.each(data, function(dataset) {
		scope.datasets[dataset.name] = {
			data:	[],
			min:	0,
			max:	0
		};
		_.each(dataset.data, function(datapoint) {
			scope.datasets[dataset.name].data.push(datapoint[1]);
		});
		
		scope.datasets[dataset.name].min 		= _.min(scope.datasets[dataset.name].data);
		scope.datasets[dataset.name].max 		= _.max(scope.datasets[dataset.name].data);
		scope.datasets[dataset.name].encoded	= simpleEncode(scope.datasets[dataset.name].data, scope.datasets[dataset.name].max);
		scope.chd.push(scope.datasets[dataset.name].encoded);
		if (dataset.color) {
			scope.chco.push(dataset.color);
		} else {
			scope.chco.push("76A4FB");
		}
	});
	
	if (this.chd.length > 1) {
		// Remove the ezxtra "s:" from the encoded data
		var i;
		for (i=1;i<this.chd.length;i++) {
			this.chd[i] = this.chd[i].substr(2);
		}
	}
	
	console.log("scope.chd",JSON.stringify(scope.chd,null,4));
	console.log("scope.datasets",JSON.stringify(scope.datasets,null,4));
	
	
}
google_image_chart.line.prototype.render = function() {
	var params = {};
	
	params['cht'] 	= "lc";
	params['chco'] 	= this.chco.join(","); //"76A4FB";
	params['chd'] 	= this.chd.join(",");
	
	params['chs'] 	= this.options.width+"x"+this.options.height;
	
	params['chxt'] 	= "y";
	
	if (this.options.bands) {
		var bands = [];
		_.each(this.options.bands, function(band) {
			bands.push("r,"+band.color+",0,"+band.from+","+band.to);
		});
		params['chm'] = bands.join("|");
	}
	
	/*
	if (this.options.autoscale) {
		params['chds'] 	= this.min+","+this.max;
		params['chxt'] 	= "y";
		params['chxr'] 	= "0,"+this.min+","+this.max+",10";
	}
	*/
	return google_image_chart.build(params);
}


exports.charts = google_image_chart;