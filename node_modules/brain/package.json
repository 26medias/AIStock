{
  "name": "brain",
  "description": "Neural network library",
  "version": "0.6.2",
  "author": {
    "name": "Heather Arthur",
    "email": "fayearthur@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/harthur/brain.git"
  },
  "main": "./lib/brain",
  "dependencies": {
    "underscore": ">=1.5.1",
    "inherits": "~2.0.1"
  },
  "devDependencies": {
    "mocha": ">=1.0.0",
    "canvas": ">=0.10.0",
    "cradle": ">=0.2.0",
    "should": ">=0.6.0",
    "async": ">=0.1.18"
  },
  "keywords": [
    "neural network",
    "classifier",
    "machine learning"
  ],
  "readme": "# brain\n`brain` is a JavaScript [neural network](http://en.wikipedia.org/wiki/Artificial_neural_network) library. Here's an example of using it to approximate the XOR function:\n\n```javascript\nvar net = new brain.NeuralNetwork();\n\nnet.train([{input: [0, 0], output: [0]},\n           {input: [0, 1], output: [1]},\n           {input: [1, 0], output: [1]},\n           {input: [1, 1], output: [0]}]);\n\nvar output = net.run([1, 0]);  // [0.987]\n```\n\nThere's no reason to use a neural network to figure out XOR however (-: so here's a more involved, realistic example:\n[Demo: training a neural network to recognize color contrast](http://harthur.github.com/brain/)\n\n# Using in node\nIf you have [node](http://nodejs.org/) you can install with [npm](http://github.com/isaacs/npm):\n\n  npm install brain\n\n# Using in the browser\nDownload the latest [brain.js](http://github.com/harthur/brain/downloads). Training is computationally expensive, so you should try to train the network offline (or on a Worker) and use the `toFunction()` or `toJSON()` options to plug the pre-trained network in to your website.\n\n# Training\nUse `train()` to train the network with an array of training data. The network has to be trained with all the data in bulk in one call to `train()`. The more training patterns, the longer it will take to train, but the better the network will be at classifiying new patterns.\n\n#### Data format\nEach training pattern should have an `input` and an `output`, both of which can be either an array of numbers from `0` to `1` or a hash of numbers from `0` to `1`. For the [color constrast demo](http://harthur.github.com/brain/) it looks something like this:\n\n```javascript\nvar net = new brain.NeuralNetwork();\n\nnet.train([{input: { r: 0.03, g: 0.7, b: 0.5 }, output: { black: 1 }},\n           {input: { r: 0.16, g: 0.09, b: 0.2 }, output: { white: 1 }},\n           {input: { r: 0.5, g: 0.5, b: 1.0 }, output: { white: 1 }}]);\n\nvar output = net.run({ r: 1, g: 0.4, b: 0 });  // { white: 0.99, black: 0.002 }\n```\n\n#### Options\n`train()` takes a hash of options as its second argument:\n\n```javascript\nnet.train(data, {\n  errorThresh: 0.004,  // error threshold to reach\n  iterations: 20000,   // maximum training iterations\n  log: true,           // console.log() progress periodically\n  logPeriod: 10        // number of iterations between logging\n})\n```\n\nThe network will train until the training error has gone below the threshold (default `0.004`) or the max number of iterations (default `20000`) has been reached, whichever comes first.\n\nBy default training won't let you know how its doing until the end, but set `log` to `true` to get periodic updates on the current training error of the network. The training error should decrease every time.\n\n#### Output\nThe ouput of `train()` is a hash of information about how the training went:\n\n```javascript\n{\n  error: 0.0039139985510105032,  // training error\n  iterations: 406                // training iterations\n}\n```\n\n#### Failing\nIf the network failed to train, the error will be above the error threshold. This could happen because the training data is too noisy (most likely), the network doesn't have enough hidden layers or nodes to handle the complexity of the data, or it hasn't trained for enough iterations.\n\nIf the training error is still something huge like `0.4` after 20000 iterations, it's a good sign that the network can't make sense of the data you're giving it.\n\n# JSON\nSerialize or load in the state of a trained network with JSON:\n\n```javascript\nvar json = net.toJSON();\n\nnet.fromJSON(json);\n```\n\nYou can also get a custom standalone function from a trained network that acts just like `run()`:\n\n```javascript\nvar run = net.toFunction();\n\nvar output = run({ r: 1, g: 0.4, b: 0 });\n\nconsole.log(run.toString()); // copy and paste! no need to import brain.js\n```\n# Streams\nThe network now has a [WriteStream](http://nodejs.org/api/stream.html#stream_class_stream_writable). You can train the network by using `pipe()` to send the training data to the network.\n\n#### Example\nRefer to `test/unit/stream-bitwise.js` for an example on how to train the network with a stream.\n\n#### Initialization\nTo train the network using a stream you must first create the stream by calling `net.createTrainStream()` which takes the following options:\n\n* `floodCallback()` - the callback function to re-populate the stream. This gets called on every training iteration.\n* `doneTrainingCallback(info)` - the callback function to execute when the network is done training. The `info` param will contain a hash of information about how the training went:\n\n```javascript\n{\n  error: 0.0039139985510105032,  // training error\n  iterations: 406                // training iterations\n}\n```\n\n#### Transform\nUse a [Transform](http://nodejs.org/api/stream.html#stream_class_stream_transform) to coerce the data into the correct format. You might also use a Transform stream to normalize your data on the fly.\n\n# Options\n`NeuralNetwork()` takes a hash of options:\n\n```javascript\nvar net = new NeuralNetwork({\n   hiddenLayers: [4],\n   learningRate: 0.6\n});\n```\n\n#### hiddenLayers\nSpecify the number of hidden layers in the network and the size of each layer. For example, if you want two hidden layers - the first with 3 nodes and the second with 4 nodes, you'd give:\n\n```\nhiddenLayers: [3, 4]\n```\n\nBy default `brain` uses one hidden layer with size proportionate to the size of the input array.\n\n#### learningRate\nThe learning rate is a parameter that influences how quickly the network trains. It's a number from `0` to `1`. If the learning rate is close to `0` it will take longer to train. If the learning rate is closer to `1` it will train faster but it's in danger of training to a local minimum and performing badly on new data. The default learning rate is `0.3`.\n\n\n# Bayesian classifier\n\nThe Bayesian classifier that used to be here has moved to its own library, [classifier](https://github.com/harthur/classifier).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/harthur/brain/issues"
  },
  "homepage": "https://github.com/harthur/brain",
  "_id": "brain@0.6.2",
  "dist": {
    "shasum": "45e5d253ac94ab532254dc070489ec58eb338116"
  },
  "_from": "brain@latest",
  "_resolved": "https://registry.npmjs.org/brain/-/brain-0.6.2.tgz"
}
